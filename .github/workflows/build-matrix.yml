name: Cross-Platform GPU Build Matrix

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

jobs:
  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: metal
            build_flag: -DBUILD_METAL=ON
            test_command: "./build/gpu_bench 1024 1000 3 metal results_metal.csv ultra"
          - os: ubuntu-latest
            platform: cuda
            build_flag: -DBUILD_CUDA=ON
            test_command: "./build/gpu_bench 1024 1000 3 cuda results_cuda.csv ultra"
            cuda-version: '11.8'
          - os: ubuntu-latest
            platform: rocm
            build_flag: -DBUILD_ROCM=ON
            test_command: "./build/gpu_bench 1024 1000 3 rocm results_rocm.csv ultra"
            rocm-version: '5.4'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pybind11
    
    - name: Set up CUDA (Linux only)
      if: matrix.platform == 'cuda'
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: ${{ matrix.cuda-version }}
    
    - name: Set up ROCm (Linux only)
      if: matrix.platform == 'rocm'
      run: |
        wget https://repo.radeon.com/amdgpu-install/5.4/ubuntu/jammy/amdgpu-install_5.4.50400-1_all.deb
        sudo dpkg -i amdgpu-install_5.4.50400-1_all.deb
        sudo amdgpu-install --usecase=rocm
    
    - name: Build
      run: |
        cd holographic-fs/native/holographic
        cmake -B build -DCMAKE_BUILD_TYPE=Release ${{ matrix.build_flag }}
        cmake --build build --config Release
    
    - name: Run native benchmark
      run: |
        cd holographic-fs/native/holographic
        ${{ matrix.test_command }}
    
    - name: Run accuracy validation (macOS only)
      if: matrix.platform == 'metal'
      run: |
        cd holographic-fs/native/holographic
        python3 ../../../scripts/validate_accuracy.py
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ matrix.platform }}
        path: holographic-fs/native/holographic/results_${{ matrix.platform }}.csv
    
    - name: Performance validation
      run: |
        cd holographic-fs/native/holographic
        if [ -f results_${{ matrix.platform }}.csv ]; then
          echo "✅ Benchmark results generated"
          # Add performance threshold checks here
          # e.g., check if ops/sec > 200000
        else
          echo "❌ No benchmark results found"
          exit 1
        fi
