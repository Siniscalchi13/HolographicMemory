name: Build and Publish Package

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        pytest tests/ --cov=holographic_memory --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for semantic versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine semantic-version
    
    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Development version based on commit
          BASE_VERSION=$(python -c "import holographic_memory; print(holographic_memory.__version__)")
          COMMIT_SHA=${GITHUB_SHA::8}
          VERSION="${BASE_VERSION}.dev${GITHUB_RUN_NUMBER}+${COMMIT_SHA}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
    
    - name: Update version in package
      run: |
        sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/" holographic_memory/__init__.py
    
    - name: Build package
      run: python -m build
    
    - name: Publish to GitHub Packages (private)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub Packages PyPI registry for this org
        # Note: consumers should configure pip with extra-index-url https://pypi.pkg.github.com/SmartHausGroup/
        twine upload --repository-url https://pypi.pkg.github.com/SmartHausGroup/ dist/*
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
