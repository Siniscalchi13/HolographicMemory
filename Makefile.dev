# ═══════════════════════════════════════════════════════════════════════════════
# Makefile.dev - Development Targets
# ═══════════════════════════════════════════════════════════════════════════════

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Configuration                                                               │
# └─────────────────────────────────────────────────────────────────────────────┘

PY              ?= python3
PIP             ?= $(PY) -m pip
VENV_DIR        ?= venv313
VENV_PY         ?= $(shell pwd)/$(VENV_DIR)/bin/python
VENV_PIP        ?= $(VENV_PY) -m pip
DEV_HOST        ?= 0.0.0.0
DEV_PORT        ?= $(shell python3 scripts/find_port.py)

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Target Declarations                                                        │
# └─────────────────────────────────────────────────────────────────────────────┘

.PHONY: dev-setup dev-test dev-build dev-native dev-api dev-soa dev-benchmark dev-demo dev-clean dev dev-verify launch-dev dev-all

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Environment Setup                                                          │
# └─────────────────────────────────────────────────────────────────────────────┘

dev:
	@echo "🔧 Setting up development environment..."
	@echo "📦 Creating virtual environment..."
	$(PY) -m venv $(VENV_DIR)
	@echo "⬆️ Upgrading pip, wheel, setuptools..."
	$(VENV_PIP) install --upgrade pip wheel setuptools
	@echo "📚 Installing API dependencies..."
	$(VENV_PIP) install -r services/holographic-memory/api/requirements.txt
	@echo "🔧 Installing core service..."
	$(VENV_PIP) install -e services/holographic-memory/core
	@echo "🧪 Installing development dependencies..."
	$(VENV_PIP) install pytest pytest-cov pytest-asyncio
	$(VENV_PIP) install black flake8 isort mypy
	@echo "📊 Installing dashboard dependencies..."
	$(VENV_PIP) install -r services/dashboard/requirements.txt
	@echo "🔨 Building native extensions..."
	$(MAKE) dev-native
	@echo "✅ Development environment setup complete!"
	@echo ""
	@echo "🎯 Next step: Activate virtual environment and run verification"
	@echo "   source venv313/bin/activate"
	@echo "   make dev-verify"

dev-verify:
	@echo "🔍 Verifying development environment..."
	@echo "🌌 Testing GPU acceleration..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/holographic-memory/core/native/holographic/build'); import holographic_gpu; print('GPU platforms:', holographic_gpu.available_platforms())"
	@echo "🧪 Testing core service import..."
	@$(VENV_PY) -c "import holographicfs; print('✅ Core service imported successfully')"
	@echo "🧮 Testing math-core service import..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/math-core'); import optimizer; print('✅ Math-core service imported successfully')"
	@echo "🔄 Testing router service import..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/router'); import mathematical_router; print('✅ Router service imported successfully')"
	@echo "📊 Testing telemetry service import..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/telemetry'); import performance_tracker; print('✅ Telemetry service imported successfully')"
	@echo "🔒 Testing vault service import..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/vault'); import vault_storage; print('✅ Vault service imported successfully')"
	@echo "✅ Development environment verification complete!"
	@echo ""
	@echo "🚀 Next step: Launch development system"
	@echo "   make launch-dev"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Process Management                                                         │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-kill:
	@echo "🛑 Stopping existing HolographicMemory processes..."
	@-pkill -f "python.*main.py" 2>/dev/null || true
	@-pkill -f "uvicorn.*app_soa" 2>/dev/null || true
	@-pkill -f "python3 -m http.server" 2>/dev/null || true
	@echo "✅ Existing processes stopped"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Application Launch                                                         │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-launch:
	@echo "🚀 Launching SOA Web Dashboard..."
	@echo "🌌 Starting web-based command center..."
	@echo "📊 Opening browser dashboard at http://localhost:8086"
	@echo "🔗 API will run on http://localhost:8085"
	@echo ""
	@echo "Starting API server in background..."
	@$(VENV_PY) main.py --port 8085 &
	@sleep 3
	@echo "Starting web dashboard server..."
	@cd services/dashboard/web && python3 -m http.server 8086 &
	@sleep 2
	@echo "✅ Dashboard ready! Opening browser..."
	@open http://localhost:8086 || xdg-open http://localhost:8086 || echo "Please open http://localhost:8086 in your browser"
	@echo ""
	@echo "🎯 Web Dashboard Features:"
	@echo "   • Beautiful terminal-style interface"
	@echo "   • Real-time system monitoring"
	@echo "   • Interactive SOA commands"
	@echo "   • GPU status and performance metrics"
	@echo "   • Holographic memory operations"
	@echo ""
	@echo "Press Ctrl+C to stop both servers"
	@wait

dev-all:
	@echo "🎯 Running complete development setup sequence..."
	@echo "🧹 Step 1: Cleaning build artifacts..."
	$(MAKE) dev-clean
	@echo ""
	@echo "🛑 Step 2: Stopping existing processes..."
	$(MAKE) dev-kill
	@echo ""
	@echo "🔧 Step 3: Setting up development environment..."
	$(MAKE) dev
	@echo ""
	@echo "🔍 Step 4: Verifying development environment..."
	$(MAKE) dev-verify
	@echo ""
	@echo "🚀 Step 5: Launching development system..."
	@echo "⚠️  Note: You need to activate the virtual environment first:"
	@echo "   source venv313/bin/activate"
	@echo "   make launch-dev"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Testing & Validation                                                       │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-test:
	@echo "🧪 Running development tests..."
	@echo "🔍 Testing core service..."
	@cd services/holographic-memory/core && $(VENV_PY) -m pytest -v --cov=holographicfs --cov-report=html
	@echo "🌐 Testing API service..."
	@cd services/holographic-memory/api && $(VENV_PY) -m pytest -v
	@echo "🧮 Testing math-core service..."
	@cd services/math-core && $(VENV_PY) -m pytest -v
	@echo "🔄 Testing router service..."
	@cd services/router && $(VENV_PY) -m pytest -v
	@echo "📊 Testing telemetry service..."
	@cd services/telemetry && $(VENV_PY) -m pytest -v
	@echo "🔒 Testing vault service..."
	@cd services/vault && $(VENV_PY) -m pytest -v
	@echo "✅ All development tests passed!"

.PHONY: dev-enterprise-tests
dev-enterprise-tests:
	@echo "🏢 Running enterprise test suite (unit, integration, contract, e2e)..."
	@$(VENV_PY) -m pip install -e services/holographic-memory/core
	@$(VENV_PIP) install .[dev,enterprise]
	@$(VENV_PY) -m pytest -m "unit or integration or contract or e2e" --html=tests/reports/pytest_enterprise.html --self-contained-html -q
	@echo "📊 Coverage report: tests/reports/coverage/index.html"
	@echo "✅ Enterprise tests complete."

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Build & Compilation                                                        │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-build:
	@echo "🔨 Building development components..."
	@echo "📦 Building core service..."
	@cd services/holographic-memory/core && $(VENV_PY) -m build
	@echo "🔧 Building native extensions..."
	$(MAKE) dev-native
	@echo "✅ Development build complete!"

dev-native:
	@echo "🔧 Building native extensions for development..."
	@which clang++ > /dev/null || (echo "❌ clang++ not found. Install Xcode Command Line Tools: xcode-select --install" && exit 1)
	@which cmake > /dev/null || (echo "❌ cmake not found. Install with: brew install cmake" && exit 1)
	@echo "🏗️ Building GPU backend with CMake..."
	@cd services/holographic-memory/core/native/holographic && \
		mkdir -p build && \
		cd build && \
		cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_METAL=ON -DBUILD_3D=ON && \
		make -j$(shell sysctl -n hw.ncpu)
	@echo "✅ Native extensions built successfully!"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Service Management                                                         │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-api:
	@echo "🚀 Starting development API server..."
	@echo "🌐 Server will be available at http://$(DEV_HOST):$(DEV_PORT)"
	@echo "📚 API documentation at http://$(DEV_HOST):$(DEV_PORT)/docs"
	@$(VENV_PY) -m uvicorn services.holographic-memory.api.app_soa:app --reload --host $(DEV_HOST) --port $(DEV_PORT)

dev-soa:
	@echo "🌐 Starting development SOA system..."
	@echo "🔧 Starting all services in development mode..."
	@$(VENV_PY) main.py

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Performance & Demos                                                        │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-benchmark:
	@echo "📊 Running development benchmarks..."
	@echo "🔍 Running GPU performance benchmarks..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/holographic-memory/core/native/holographic/build'); import holographic_gpu; print('GPU platforms:', holographic_gpu.available_platforms())"
	@echo "🧮 Running mathematical validation benchmarks..."
	@$(VENV_PY) tools/validate_accuracy.py
	@echo "✅ Development benchmarks complete!"

dev-demo:
	@echo "🎬 Running development demos..."
	@echo "🎯 Running end-to-end demo..."
	@$(VENV_PY) tools/demo_end_to_end.py
	@echo "✅ Development demos complete!"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │ Cleanup                                                                    │
# └─────────────────────────────────────────────────────────────────────────────┘

dev-clean:
	@echo "🧹 Cleaning development artifacts..."
	@rm -rf **/__pycache__ build dist .pytest_cache
	@rm -rf services/holographic-memory/core/*.egg-info
	@rm -rf services/holographic-memory/core/native/holographic/build
	@rm -rf htmlcov .coverage
	@echo "✅ Development cleanup complete!"
