[build-system]
requires = ["setuptools>=65", "wheel", "pybind11>=2.10.0"]
build-backend = "setuptools.build_meta"

[project]
name = "holographic-memory"
dynamic = ["version"]
description = "Enterprise-grade holographic memory system with 7-layer architecture"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "SmartHaus Group", email = "dev@smarthaus.ai" }]
license = { text = "Proprietary" }
keywords = ["holographic", "memory", "ai", "storage", "enterprise"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Filesystems",
]

dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "PyMuPDF>=1.23.0",
    "requests>=2.32.0",
    "psutil>=5.9.0",
    "flask>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.6.1",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=4.1.1",
    "pytest-timeout>=2.3.1",
    "pytest-rerunfailures>=14.0",
    "httpx>=0.27.0",
    "respx>=0.21.1",
    "requests>=2.32.0",
    "faker>=26.0.0",
    "hypothesis>=6.112.0",
    "psutil>=6.0.0",
    "freezegun>=1.4.0",
    "tenacity>=9.0.0",
    "bandit>=1.7.9",
    "pip-audit>=2.7.3",
    "jinja2>=3.1.4",
    "black>=24.8.0",
    "isort>=5.13.2",
    "mypy>=1.11.2",
    "pre-commit>=3.8.0",
]
enterprise = [
    "prometheus-client>=0.16.0",
    "cryptography>=40.0.0",
    "redis>=4.5.0",
]

[project.scripts]
holo = "holographic_memory.cli:main"

[project.urls]
Homepage = "https://smarthaus.ai/holographic-memory"
Repository = "https://github.com/SmartHausGroup/HolographicMemory"
Documentation = "https://docs.smarthaus.ai/holographic-memory"

[tool.setuptools.packages.find]
where = ["."]
include = ["holographic_memory*", "services*"]
exclude = ["tests*", "benchmarks*", "documentation*"]

[tool.setuptools.dynamic]
version = {attr = "holographic_memory.__version__"}

[tool.black]
line-length = 88
target-version = ['py310']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
# Coverage across services and core modules with HTML+JSON
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "-n",
    "auto",
    "--dist=loadfile",
    "--maxfail=1",
    "--durations=25",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html:tests/reports/coverage",
    "--cov-report=json:tests/reports/coverage/coverage.json",
    "--cov-branch",
    "--html=tests/reports/html/pytest_report.html",
    "--self-contained-html",
    "--junitxml=tests/reports/junit.xml",
    "--log-cli-level=INFO",
    "--log-cli-format=%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    "--log-cli-date-format=%Y-%m-%d %H:%M:%S",
    "--log-file=tests/reports/logs/pytest.log",
    "--log-file-level=INFO",
    "--log-file-format=%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    "--log-file-date-format=%Y-%m-%d %H:%M:%S",
]
markers = [
    "unit: fast, isolated unit tests",
    "integration: service-to-service interactions",
    "contract: API contract/schema tests",
    "e2e: end-to-end workflow tests",
    "performance: benchmarks and load tests",
    "security: security and compliance tests",
    "chaos: failure injection and resilience tests",
    "gpu: requires GPU acceleration backends",
    "compliance: regulatory and audit tests",
    "network: network-dependent tests",
    "database: database-dependent tests",
]
filterwarnings = [
    "ignore:.*holographic_gpu.*:ImportWarning",
    "ignore:.*deprecated.*:DeprecationWarning",
]
