name: HolographicMemory
options:
  minimumXcodeGenVersion: 2.30.0
  deploymentTarget:
    macOS: "13.0"
targets:
  HolographicMemory:
    type: application
    platform: macOS
    deploymentTarget: "13.0"
    sources:
      - path: Sources
    resources:
      - path: Resources
      - path: ../../services
        optional: false
      - path: ../../holographic-fs
        optional: false
    settings:
      base:
        PRODUCT_BUNDLE_IDENTIFIER: org.holographicmemory.app
        MARKETING_VERSION: 0.1.0
        CURRENT_PROJECT_VERSION: 1
        SWIFT_VERSION: 5.0
        CODE_SIGN_STYLE: Automatic
        ENABLE_HARDENED_RUNTIME: YES
        INFOPLIST_FILE: macos/HolographicMemoryApp/Info.plist
        ASSETCATALOG_COMPILER_APPICON_NAME: AppIcon
        OTHER_LDFLAGS: $(inherited)
        LD_RUNPATH_SEARCH_PATHS: "@executable_path/../Frameworks"
        # Sandbox settings for App Store
        CODE_SIGN_ENTITLEMENTS: macos/HolographicMemoryApp/HolographicMemory.entitlements
    prebuildScripts:
      - name: "Sync Python site-packages and prebuilt GPU module"
        script: |
          set -euo pipefail
          echo "[prebuild] Syncing bundled Python site-packages and GPU module"
          DEST_RESOURCES="${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
          mkdir -p "${DEST_RESOURCES}/Python/site-packages"
          # If developer prepared a local Python bundle, sync it
          if [ -d "${PROJECT_DIR}/Runtime/Python/site-packages" ]; then
            rsync -a --delete "${PROJECT_DIR}/Runtime/Python/site-packages/" "${DEST_RESOURCES}/Python/site-packages/"
          fi
          # Copy prebuilt Metal GPU module if present
          if compgen -G "${PROJECT_DIR}/Runtime/Python/site-packages/holographic_gpu*.so" > /dev/null; then
            cp -f ${PROJECT_DIR}/Runtime/Python/site-packages/holographic_gpu*.so "${DEST_RESOURCES}/Python/site-packages/" || true
          fi
          # Ensure our Python path includes HolographicMemory packages
          mkdir -p "${DEST_RESOURCES}/Python"
      - name: "Embed Python.framework if available"
        script: |
          set -euo pipefail
          DEST_FW="${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"
          if [ -d "${PROJECT_DIR}/Runtime/Python.framework" ]; then
            echo "[prebuild] Embedding Python.framework"
            mkdir -p "${DEST_FW}"
            rsync -a --delete "${PROJECT_DIR}/Runtime/Python.framework" "${DEST_FW}/"
          else
            echo "[prebuild] Python.framework missing. Run scripts/macos/prepare_python_env.sh"
          fi
    scheme:
      testTargets: []
    postbuildScripts: []

