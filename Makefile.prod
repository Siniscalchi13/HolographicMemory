# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Makefile.prod - Production Targets
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
# ‚îÇ Configuration                                                               ‚îÇ
# ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

PY              ?= python3
PIP             ?= $(PY) -m pip
VENV_DIR        ?= venv
VENV_PY         ?= $(VENV_DIR)/bin/python
VENV_PIP        ?= $(VENV_PY) -m pip
PROD_PORT       ?= 8080
PROD_HOST       ?= 0.0.0.0
DOCKER_REGISTRY ?= holographicmemory
VERSION         ?= $(shell git describe --tags --always --dirty)

# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
# ‚îÇ Target Declarations                                                        ‚îÇ
# ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

.PHONY: prod-deploy prod-release prod-test prod-benchmark prod-clean prod-docker

# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
# ‚îÇ Deployment & Release                                                       ‚îÇ
# ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

prod-deploy:
	@echo "üöÄ Deploying to production..."
	@echo "üîç Validating production readiness..."
	$(MAKE) prod-test
	@echo "üì¶ Building production packages..."
	$(MAKE) prod-build
	@echo "üê≥ Building production Docker images..."
	$(MAKE) prod-docker
	@echo "‚ò∏Ô∏è Deploying to Kubernetes..."
	@kubectl apply -f deploy/k8s/
	@echo "‚úÖ Production deployment complete!"

prod-release:
	@echo "üì¶ Creating production release..."
	@echo "üè∑Ô∏è Version: $(VERSION)"
	@echo "üîç Running production tests..."
	$(MAKE) prod-test
	@echo "üìä Running production benchmarks..."
	$(MAKE) prod-benchmark
	@echo "üì¶ Building release packages..."
	@cd services/holographic-memory/core && $(VENV_PY) -m build --sdist --wheel
	@echo "üê≥ Building release Docker images..."
	@docker build -t $(DOCKER_REGISTRY)/holographic-memory:$(VERSION) .
	@docker build -t $(DOCKER_REGISTRY)/holographic-memory:latest .
	@echo "üìã Creating release notes..."
	@echo "Release $(VERSION) created successfully!" > RELEASE_NOTES.md
	@echo "‚úÖ Production release $(VERSION) complete!"

prod-test:
	@echo "üß™ Running production tests..."
	@echo "üîç Testing core service..."
	@cd services/holographic-memory/core && $(VENV_PY) -m pytest -v --tb=short
	@echo "üåê Testing API service..."
	@cd services/holographic-memory/api && $(VENV_PY) -m pytest -v --tb=short
	@echo "üßÆ Testing math-core service..."
	@cd services/math-core && $(VENV_PY) -m pytest -v --tb=short
	@echo "üîÑ Testing router service..."
	@cd services/router && $(VENV_PY) -m pytest -v --tb=short
	@echo "üìä Testing telemetry service..."
	@cd services/telemetry && $(VENV_PY) -m pytest -v --tb=short
	@echo "üîí Testing vault service..."
	@cd services/vault && $(VENV_PY) -m pytest -v --tb=short
	@echo "‚úÖ All production tests passed!"

prod-benchmark:
	@echo "üìä Running production benchmarks..."
	@echo "üîç Running GPU performance benchmarks..."
	@$(VENV_PY) -c "import sys; sys.path.append('services/holographic-memory/core/native/holographic/build'); import holographic_gpu; print('GPU platforms:', holographic_gpu.available_platforms())"
	@echo "üßÆ Running mathematical validation benchmarks..."
	@$(VENV_PY) tools/validate_accuracy.py
	@echo "üìà Running enterprise benchmarks..."
	@$(VENV_PY) tools/run_enterprise_benchmarks.py
	@echo "‚úÖ Production benchmarks complete!"

prod-build:
	@echo "üî® Building production components..."
	@echo "üì¶ Building core service..."
	@cd services/holographic-memory/core && $(VENV_PY) -m build --sdist --wheel
	@echo "üîß Building native extensions..."
	$(MAKE) prod-native
	@echo "‚úÖ Production build complete!"

prod-native:
	@echo "üîß Building native extensions for production..."
	@which clang++ > /dev/null || (echo "‚ùå clang++ not found. Install Xcode Command Line Tools: xcode-select --install" && exit 1)
	@which cmake > /dev/null || (echo "‚ùå cmake not found. Install with: brew install cmake" && exit 1)
	@echo "üèóÔ∏è Building GPU backend with CMake (Release)..."
	@cd services/holographic-memory/core/native/holographic && \
		mkdir -p build && \
		cd build && \
		cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_METAL=ON -DHOLO_BUILD_DEV=OFF -DBUILD_3D=OFF && \
		make -j$(shell sysctl -n hw.ncpu)
	@echo "‚úÖ Production native extensions built successfully!"

prod-docker:
	@echo "üê≥ Building production Docker images..."
	@echo "üèóÔ∏è Building main service image..."
	@docker build -t $(DOCKER_REGISTRY)/holographic-memory:$(VERSION) .
	@docker build -t $(DOCKER_REGISTRY)/holographic-memory:latest .
	@echo "üåê Building API service image..."
	@docker build -f services/holographic-memory/api/Dockerfile -t $(DOCKER_REGISTRY)/holographic-api:$(VERSION) services/holographic-memory/api/
	@echo "‚úÖ Production Docker images built successfully!"

prod-clean:
	@echo "üßπ Cleaning production artifacts..."
	@rm -rf **/__pycache__ build dist .pytest_cache
	@rm -rf services/holographic-memory/core/*.egg-info
	@rm -rf services/holographic-memory/core/native/holographic/build
	@rm -rf htmlcov .coverage
	@docker system prune -f
	@echo "‚úÖ Production cleanup complete!"
